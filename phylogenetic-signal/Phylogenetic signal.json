{
    "inputs": [
        {
            "format": "r.dataframe",
            "name": "table",
            "type": "table"
        },
        {
            "format": "r.apetree",
            "name": "tree",
            "type": "tree"
        },
        {
            "domain": {
                "format": "column.names",
                "input": "table"
            },
            "format": "text",
            "name": "column",
            "type": "string"
        },
        {
            "default": "[object Object]",
            "domain": [
                "lambda",
                "K"
            ],
            "format": "text",
            "name": "method",
            "type": "string"
        }
    ],
    "mode": "r",
    "name": "Phylogenetic signal",
    "outputs": [
        {
            "name": "analysisType",
            "type": "string",
            "format": "text"
        },
        {
            "name": "testStatistic",
            "type": "number",
            "format": "number"
        },
        {
            "name": "lnlNull",
            "type": "number",
            "format": "number"
        },
        {
            "name": "lnlAlt",
            "type": "number",
            "format": "number"
        },
        {
            "name": "parameter",
            "type": "number",
            "format": "number"
        },
        {
            "name": "pVal",
            "type": "number",
            "format": "number"
        }
    ],
    "script": "#data(anolis); tree <- anolis$phy; table <- anolis$dat; column <- \"SVL\"; method <- \"lambda\"; discreteModelType=\"ER\"\n#library(devtools)\n#options(repos=\"http://cran.cnr.Berkeley.edu\")\n#install_github(\"arborworkflows/aRbor\")\n# measure phylogenetic signal\nrequire(aRbor)\n\n# Names and data match - so data integrator might be needed at this step\n# (in general) but is not needed in this case.\n\ntd <- make.treedata(tree, table)\ntd <- select(td, which(colnames(td$dat)==column))\nphy <- td$phy\ndat <- td$dat\n\ncharType <- aRbor:::detectCharacterType(dat[[1]], cutoff=0.2)\n\nif(charType==\"discrete\"){\n  result <- physigArbor(td, charType=charType, signalTest=\"pagelLambda\")\n  analysisType <- \"discrete lambda\"\n  parameter <- result[[1]]$lambdaValue\n  lnlNull <- result[[1]]$lnlValues[1]\n  lnlAlt <- result[[1]]$lnlValues[2]\n  testStatistic <- result[[1]]$chisqTestStat\n  pVal <- result[[1]]$chisqPVal\n}\nif(charType==\"continuous\"){\n  if(method==\"lambda\") {\n    result <- physigArbor(td, charType=charType, signalTest=\"pagelLambda\")\n    analysisType <- \"continuous lambda\"\n    parameter <- result[[1]]$lambdaValue\n    lnlNull <- result[[1]]$lnlValues[1]\n    lnlAlt <- result[[1]]$lnlValues[2]\n    testStatistic <- result[[1]]$chisqTestStat\n    pVal <- result[[1]]$chisqPVal\n\n  }\n  if(method==\"K\") {\n    result <- physigArbor(td, charType=charType, signalTest=\"Blomberg\")\n    analysisType <- \"continuous Blomberg K\"\n    }\n}\n\nresult <- t(as.data.frame(unlist(result)))\nrownames(result) <- NULL\n"
}